name: Build with Wednesday
description: Build a static site using the `wed` CLI

inputs:
  version:
    description: Wednesday release tag version (e.g., v1.2.3). If empty, latest release will be used.
    required: false
    default: ""
  flags:
    description: Flags to pass to `wed build`.
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Set platform info
      id: platform
      shell: bash
      run: |
        case "${{ runner.os }}" in
          Linux | macOS)
            EXT="tar.gz"
            BINARY="wed"
            ;;
          Windows)
            EXT="zip"
            BINARY="wed.exe"
            ;;
          *)
            echo "Unsupported OS: ${{ runner.os }}"
            exit 1
            ;;
        esac
        echo "ext=$EXT" >> "$GITHUB_OUTPUT"
        echo "binary=$BINARY" >> "$GITHUB_OUTPUT"

    - name: Install jq (if needed)
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y jq
          elif [ "${{ runner.os }}" = "macOS" ]; then
            brew install jq
          fi
        fi

    - name: Determine wed version
      id: wed-version
      shell: bash
      run: |
        if [ -z "${{ inputs.version }}" ]; then
          VERSION=$(curl -s https://api.github.com/repos/DazFather/Wednesday/releases/latest | jq -r .tag_name)
          if [ "$VERSION" == "null" ] || [ -z "$VERSION" ]; then
            echo "❌ Failed to fetch latest version from GitHub API"
            exit 1
          fi
        else
          VERSION="${{ inputs.version }}"
        fi
        echo "Using wed version: $VERSION"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"

    - name: Download wed ${{ steps.wed-version.outputs.version }}
      shell: bash
      run: |
        FILENAME="wed-${{ runner.os }}-amd64.${{ steps.platform.outputs.ext }}"
        URL="https://github.com/DazFather/Wednesday/releases/download/${{ steps.wed-version.outputs.version }}/$FILENAME"
        echo "Downloading $URL"
        curl -sSL "$URL" -o "wed-archive.${{ steps.platform.outputs.ext }}"

    - name: Extract wed binary
      shell: bash
      run: |
        if [[ "${{ steps.platform.outputs.ext }}" == "zip" ]]; then
          unzip -o wed-archive.zip
        else
          tar -xvf wed-archive.tar.gz
        fi
        ls -la

    - name: Normalize wed binary
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          mv wed.exe wed
        else
          chmod +x wed
        fi
        echo "$PWD" >> "$GITHUB_PATH"

    - name: Print working directory
      shell: bash
      run: |
        pwd

    - name: List project contents
      shell: bash
      run: |
        ls -laR

    - name: Build site
      shell: bash
      run: |
        ./wed build ${{ inputs.flags }}
