.TH WEDNESDAY 7 2025-06-14 "Wednesday Web Framework"


.SH NAME
wednesday \- component-based framework for site generation


.SH DESCRIPTION
Wednesday is a front-end web framework that aims to stay close to the browser while still providing a solid developer experience and quality-of-life features.


.SH PHILOSOPHY AND DESIGN
The philosophy of Wednesday can be summarized as follows:

.SS Close to the browser
More specifically, the approach we follow is to reject unnecessary complexity and abstraction.
The experience of writing a component should feel as close as possible to writing plain HTML, CSS, and JavaScript.

\fI No extra overhead, no strange or complicated behavior hidden behind the framework that you now need to learn, understand, and debug.\fR

If you need to look something up, it will likely be found in the MDN or Go \fIhtml/template\fR documentation.
For the same reason, the building blocks of Wednesday are few and flexible. Once you learn them, the framework should feel "transparent."

.SS Atomic and reusable
Atomicity is a core principle in Wednesday. It applies to how components are structured, how pages are built, and how libraries are handled.

\fI Components are essentially UI fragments and should encapsulate everything they need to function—batteries included.\fR

\fI Pages using components should be independently accessible.\fR

\fI A library should include its own dependencies.\fR

\fI The build output should reside in a self-contained directory.\fR

All of this contributes to predictability and reusability.

.SS Do it your way
In Wednesday, a \fIproject\fR is simply a directory where everything takes place.
The framework identifies \fIcomponents\fR and \fIpages\fR by file extension, regardless of how deeply nested they are.

\fI Feel free to structure your project however you want.\fR

Combined with the JSON-based project settings and the `wed run` command pipeline, this makes your project more flexible and better suited to your style and workflow.

.SS Small to medium
There are many front-end web frameworks out there, perhaps too many. Wednesday does not aim to compete with them.
We believe that many frameworks focus on large-scale or enterprise projects. Wednesday goes in the opposite direction:

\fI All projects should start small and simple and evolve over time.\fR

Premature optimization is the root of most evils.


.SH COMPONENT STRUCTURE
A component represents an atomic piece of UI.
They are essentially files with the `.wed.html` extension and can be placed anywhere within the project.
Each component is divided into:

.SS html \fI(required)\fR
A pseudo-HTML tag that wraps the actual HTML content of the component.
The content of the tag is enhanced using the Go template engine (more of this later).

Optionally, it accepts a \fBtype\fR attribute with one of the following values:

.TP
.B static (default)
Indicates the component is rendered at build time via the template engine.
The HTML content is wrapped in a `<div>` with the classes `wed-component` and `<componentname>-component`.

.TP
.B dynamic
Indicates the component is rendered only at runtime, using a `<template>` tag with `id=\(dq<componentname>-component\(dq`, typically injected at the top of the body.

\fIUsually, functions like \fBuseTemplate\fP should be defined in the script section of the dynamic component and imported where needed.\fR

The content is still wrapped in the same `<div>` as in static mode to ensure styles and scripts work properly.

.TP
.B hybrid
Makes the component available both statically and dynamically.

.SS script \fI(optional)\fR
A pseudo-HTML tag containing the JavaScript logic for the component.
If non-empty, a `.js` file with the same name is generated.
This tag can optionally have different attributes:

.TP
.B preload
Boolean atribute.
Scripts are typically imported in the page head and evaluated later, when all html content has been successfully rendered, using the \fIdefer\fR attribute.
It\'s possible to use \fBpreload\fR to change this bahavior, letting the browser run the script before the page is ready 

.TP
.B require
Lists all components by name that are used by the current script.
In text/javascript everything is public this is used to decide witch one must be evaluated first.
On ECMAScript modules imports are managed by the related syntax.
Components used dynamically by the script must be included no matter the module type

.TP
.B module
Overrides the default module (see PROJECT CONFIGURATION section) only for this component.
It follows the same parsing rules as the JSON project settings file, so if placed but empty value it defaults to "text/javascript".
It\' recommended never to never use it in this way. Always insert the module type

.TP
.B entrypoint
Boolean atribute.
When using ECMAScript modules the current script will be imported directly in the page head tag


.SS style \fI(optional)\fR
A pseudo-HTML tag containing styles scoped to the component.
Wednesday automatically wraps all CSS rules in a selector like `.<componentname>-component` to ensure style encapsulation.

If non-empty, a `.css` file is generated with the same name as the component.
All styles are imported in the page head by default.


.SH TEMPLATE ENGINE
As mentioned earlier, Wednesday uses Go’s `html/template` engine and extends it with the following functions:

.TP
.B use \(dq<component>\(dq
Renders the HTML content of the `<component>.wed.html` file.
This also registers any dependencies used inside the component.

.TP
.B props \(dq<key>\(dq <value> \(dq<key2>\(dq <value2>
Used in a pipeline to pass data:
.EX
{{ use "contacts" props
  "DazFather" "+39 1234567"
  "NicoNex" "+39 987654"
}}
.EE
Values can be accessed inside the \fIcomponent\fR with:
.B{{ .Props.<key> }}
.EX .\" html
<li><em>mentor:</em> <span>{{ .Props.NicoNex   }}</span></li>
<li><em>mentee:</em> <span>{{ .Props.DazFather }}</span></li>
.EE

.TP
.B hold \(dq<child-component>\(dq \(dq<child-component2>\(dq
Registers one or more components for later injection using `drop`:
.EX
{{ use "modal" hold "confirm-btn" "reject-btn" }}
.EE

.TP
.B drop
Injects components previously registered with `hold`.
.EX
{{ drop . }}
.EE

.TP
.B list <value> <value2> <value3>
Creates a slice of values:
.EX .\" html
<ol>{{ range list "pippo" "pluto" "paperino" }}
  <li><span>{{ . }}</span></li>
{{ end }}</ol>
.EE

.TP
.B var \(dq<key>\(dq
Accesses a variable declared in the project settings:
.EX
{{ var "site-email" }}
.EE


.SH TEMPLATE PAGES
Wednesday supports full template pages with the \fI.tmpl\fR extension.
These files are processed by the template engine at build time and serve as the main entry points of the website.
Each template is transformed into a complete HTML page with the same base name.

As with components, template pages can be placed anywhere within the input directory and use the same template engine.
However, they support additional syntax to manage resource imports more explicitly:

.TP
.B {!import{ \(dqdynamics\(dq }!}
Generates import tags for dynamic components.
Typically placed as the first item inside the \fI<body>\fR tag.

.TP
.B {!import{ \(dqstyles\(dq }!}
Generates import tags for all component-specific styles.
Usually placed inside the \fI<head>\fR tag.

.TP
.B {!import{ \(dqscripts\(dq }!}
Generates import tags for all component scripts.
Also usually placed inside the \fI<head>\fR tag.


.SH WED UTILITIES
All Wednesday pages automatically import the \fIwed-utils.js\fR script, which provides a set of DOM utility functions designed to simplify template-driven interactivity.
These utilities include helpers for managing state, reacting to changes, binding values, and handling templates.

.SS useDisplay(\fItarget\fR, \fImutate?\fR)
Creates a function that updates the \fIinnerText\fR of a DOM element.
The target can be a CSS selector or a DOM element.
An optional \fImutate\fR function may be passed to transform the value before display.

Here a small example:

.EX .\" javascript
const show = useDisplay(".output", t => "Hello " + t)
show("World") // => updates .output with "Hello World"
.EE


.SS useEffect(\fIvalue\fR, \fIonChange\fR)
Creates a reactive object with a \fIvalue\fR property.
When \fIvalue\fR changes, the provided callback is executed with the new and old values.
Often used to reactively update DOM when state changes.

Here a small example:

.EX .\" javascript
const count = useEffect(0, newVal => console.log("Updated:", newVal))
count.value = 42 // triggers the effect
.EE


.SS useMirror(\fItarget\fR, \fIprops\fR, \fImutate?\fR)
Returns an object mirroring one or more properties of a DOM element, allowing direct controlled access (read/write).
Helps prevent unintended side effects in large codebases.

Here a small example:

.EX .\" javascript
const mirror = useMirror("input", ["value", "disabled"])
mirror.value = "Test"
mirror.disabled = true
.EE


.SS useBinds(\fItarget\fR, \fImutate?\fR)
Establishes two-way bindings between DOM elements and an object.
Elements must have a \fBbind\fR attribute using the format:
.RS
\fBproperty\fR[:\fBname\fR[:\fBevent\fR]]
.RE
Multiple bindings can be separated by spaces.

Here a small example:

.EX .\" html
<html>
  <h1>Welcome <span bind="innerText:user">new user</span>!</h1>
  <input bind="value:user:input">
</html>
<script>
  const form = useBinds("form")
  form.user = "Alice"
</script>
.EE


.SS useTemplate(\fItemplateID\fR, \fIinit?\fR)
Retrieves a \fB<template>\fR by its DOM ID and returns an object with helper methods for inserting or cloning it into the DOM.
The optional \fIinit\fR callback can customize each clone before insertion.

Here a small example:

.EX .\" javascript
const { clone } = useTemplate("todo-item", node => {
  node._binds = useBinds(node)
  return node
})
document.body.appendChild(clone())
.EE


.SH PROJECT CONFIGURATION
The project JSON settings file is optional. By default, Wednesday looks for \fIwed-settings.json\fR in the project root.
Alternatively, a different file can be specified via the \fI--settings\fR flag, which must then be passed to all `wed` commands.

Supported fields include:

.SS vars
A key-value map of build-time variables, available via the template engine using \fB{{ var \(dqkey\(dq }}\fR.

.SS commands
A map from pipeline names to shell commands, which can be run using \fBwed run <pipeline-name>\fR.

.SS output_dir
The directory where the compiled site will be placed. (default: \(dq./build\(dq)

.SS input_dir
The directory where Wednesday will search for components and pages. (default: \(dq.\(dq)

.SS module
Defines the JavaScript module type for importing scripts on pages:
.RS

.B text/javascript (default)
Uses the \fIrequire\fR attribute for dependency management.

.B ecma
Or alias \fImodule\fR — enables ECMAScript module support.
The user is responsible for managing dependencies via ES module imports.
.RE

.SH SEE ALSO
.BR wed (1)

